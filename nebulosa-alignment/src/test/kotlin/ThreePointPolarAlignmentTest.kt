import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.doubles.plusOrMinus
import io.kotest.matchers.shouldBe
import nebulosa.alignment.polar.point.three.PolarErrorDetermination
import nebulosa.alignment.polar.point.three.Position
import nebulosa.math.deg
import nebulosa.math.formatSignedDMS
import nebulosa.math.hours
import nebulosa.math.toArcsec
import nebulosa.time.IERS
import nebulosa.time.IERSA
import nebulosa.time.TimeYMDHMS
import nebulosa.time.UTC
import java.nio.file.Path
import kotlin.io.path.inputStream

class ThreePointPolarAlignmentTest : StringSpec() {

    init {
        val iersa = IERSA()
        iersa.load(Path.of("../data/finals2000A.all").inputStream())
        IERS.attach(iersa)

        // Based on logs generated by N.I.N.A. using Telescope Simulator for .NET and Sky Simulator (ASCOM).
        // https://sourceforge.net/projects/sky-simulator/

        "perfectly aligned" {
            val position1 = Position("05:35:18".hours, "-05 23 26".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 58, 42.4979)))
            position1.vector[0] shouldBe (0.301851589038 plusOrMinus 1e-4)
            position1.vector[1] shouldBe (-0.0681426041296783 plusOrMinus 1e-4)
            position1.vector[2] shouldBe (0.950916507216938 plusOrMinus 1e-4)

            val position2 = Position("04:54:45".hours, "-05 24 50".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 58, 58.1655)))
            position2.vector[0] shouldBe (0.300426130373811 plusOrMinus 1e-4)
            position2.vector[1] shouldBe (0.108903442814494 plusOrMinus 1e-4)
            position2.vector[2] shouldBe (0.947567507005051 plusOrMinus 1e-4)

            val position3 = Position("04:14:08".hours, "-05 26 10".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 59, 13.3739)))
            position3.vector[0] shouldBe (0.286747300379159 plusOrMinus 1e-4)
            position3.vector[1] shouldBe (0.282671401982864 plusOrMinus 1e-4)
            position3.vector[2] shouldBe (0.915353955705828 plusOrMinus 1e-4)

            val pe = PolarErrorDetermination(position1, position2, position3, LNG, SLAT)
            val (az, alt) = pe.compute()

            // Calculated Error: Az: -00° 00' 04", Alt: -00° 00' 07", Tot: 00° 00' 08"
            az.toArcsec shouldBe (-4.0 plusOrMinus 2.5)
            alt.toArcsec shouldBe (-7.0 plusOrMinus 2.5)
        }
        "bad southern polar aligned" {
            val position1 = Position("05:35:29".hours, "-05 23 44".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 2, 28.0693)))
            position1.vector[0] shouldBe (0.260120895582042 plusOrMinus 1e-4)
            position1.vector[1] shouldBe (0.452793316696993 plusOrMinus 1e-4)
            position1.vector[2] shouldBe (0.852827844313337 plusOrMinus 1e-4)

            val position2 = Position("04:54:48".hours, "-05 23 16".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 2, 43.0120)))
            position2.vector[0] shouldBe (0.223679240068826 plusOrMinus 1e-4)
            position2.vector[1] shouldBe (0.603179137475884 plusOrMinus 1e-4)
            position2.vector[2] shouldBe (0.765599455117414 plusOrMinus 1e-4)

            val position3 = Position("04:14:05".hours, "-05 22 47".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 2, 57.8800)))
            position3.vector[0] shouldBe (0.177343985686423 plusOrMinus 1e-4)
            position3.vector[1] shouldBe (0.734426214459154 plusOrMinus 1e-4)
            position3.vector[2] shouldBe (0.65510857592925 plusOrMinus 1e-4)

            val pe = PolarErrorDetermination(position1, position2, position3, LNG, SLAT)
            val (az, alt) = pe.compute()

            // Calculated Error: Az: 00° 10' 10", Alt: 00° 04' 41", Tot: 00° 11' 11"
            az.toArcsec shouldBe (610.0 plusOrMinus 7.0)
            alt.toArcsec shouldBe (281.0 plusOrMinus 7.0)
        }
        "bad northern polar aligned" {
            val position1 = Position("05:35:35".hours, "-05 32 31".deg, LNG, NLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 19, 31.1390)))
            position1.vector[0] shouldBe (-0.420977957462894 plusOrMinus 1e-4)
            position1.vector[1] shouldBe (0.517127315719859 plusOrMinus 1e-4)
            position1.vector[2] shouldBe (0.745222717492391 plusOrMinus 1e-4)

            val position2 = Position("04:54:49".hours, "-05 34 43".deg, LNG, NLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 19, 46.2383)))
            position2.vector[0] shouldBe (-0.379893065189774 plusOrMinus 1e-4)
            position2.vector[1] shouldBe (0.660293278184844 plusOrMinus 1e-4)
            position2.vector[2] shouldBe (0.647837978050554 plusOrMinus 1e-4)

            val position3 = Position("04:13:55".hours, "-05 36 32".deg, LNG, NLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 20, 1.6394)))
            position3.vector[0] shouldBe (-0.329258727296886 plusOrMinus 1e-4)
            position3.vector[1] shouldBe (0.782693400663722 plusOrMinus 1e-4)
            position3.vector[2] shouldBe (0.528185318857211 plusOrMinus 1e-4)

            val pe = PolarErrorDetermination(position1, position2, position3, LNG, NLAT)
            val (az, alt) = pe.compute()

            // Calculated Error: Az: -00° 09' 58", Alt: 00° 04' 51", Tot: 00° 11' 05"
            az.toArcsec shouldBe (-598.0 plusOrMinus 7.0)
            alt.toArcsec shouldBe (291.0 plusOrMinus 7.0)
        }
        "fix large azimuth discrepancy between exposures" {
            val longitude = "-022°49'00.0".deg
            val latitude = "-042°46'59.9".deg

            val position1 = Position(5.476485561343905, -0.40430050173123416, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 28, 46.0)))
            val position2 = Position(5.459614034041155, -0.4042712672829806, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 0.0)))
            val position3 = Position(5.442892301690354, -0.4042420718441206, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 13.0)))
            val position5 = Position(5.442892163042773, -0.4042418837336201, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 19.0)))
            val position6 = Position(5.4428922239305475, -0.4042422605337013, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 22.0)))
            val position7 = Position(5.44289211909408, -0.40424211721498055, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 25.0)))
            val position8 = Position(5.442891962285157, -0.4042420995058578, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 28.0)))
            val position9 = Position(5.44289236993265, -0.40424179586725145, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 31.0)))
            val position10 = Position(5.442892040287727, -0.40424203265041864, longitude, latitude, UTC(TimeYMDHMS(2024, 5, 11, 13, 29, 35.0)))

            // Expected: +000°00'00.0" +000°00'00.0" (approximately) because was tested on ASCOM Sky Simulator with no P.A. error.

            with(PolarErrorDetermination(position1, position2, position3, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // +000°03'28.0" +000°00'12.7"
            }
            with(PolarErrorDetermination(position1, position2, position5, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // +000°00'34.9" +000°00'00.2"
            }
            with(PolarErrorDetermination(position1, position2, position6, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // +000°05'49.9" +000°00'23.0"
            }
            with(PolarErrorDetermination(position1, position2, position7, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // +000°03'43.1" +000°00'13.8"
            }
            with(PolarErrorDetermination(position1, position2, position8, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // +000°03'23.0" +000°00'12.3"
            }
            with(PolarErrorDetermination(position1, position2, position9, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // -000°00'46.0" -000°00'05.6"
            }
            with(PolarErrorDetermination(position1, position2, position10, longitude, latitude).compute()) {
                println("%s %s".format(this[0].formatSignedDMS(), this[1].formatSignedDMS())) // +000°02'18.0" +000°00'07.6"
            }
        }
    }

    companion object {

        @JvmStatic private val SLAT = "-023".deg
        @JvmStatic private val NLAT = "+023".deg
        @JvmStatic private val LNG = "-045".deg
    }
}
