import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.doubles.plusOrMinus
import io.kotest.matchers.doubles.shouldBeExactly
import io.kotest.matchers.shouldBe
import nebulosa.alignment.polar.point.three.PolarErrorDetermination
import nebulosa.alignment.polar.point.three.PolarErrorDetermination.Companion.stenographicProjection
import nebulosa.alignment.polar.point.three.Position
import nebulosa.math.arcsec
import nebulosa.math.deg
import nebulosa.math.hours
import nebulosa.math.toArcsec
import nebulosa.platesolver.PlateSolution
import nebulosa.time.TimeYMDHMS
import nebulosa.time.UTC

class ThreePointPolarAlignmentTest : StringSpec() {

    init {
        // Based on logs generated by N.I.N.A. using Telescope Simulator for .NET and Sky Simulator (ASCOM).
        // https://sourceforge.net/projects/sky-simulator/

        "position" {
            val a = Position("04:14:08".hours, "-05 26 10".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 59, 13.3739)))
            val b = Position(a.vector, LNG, SLAT)

            a.topocentric.azimuth shouldBeExactly b.topocentric.azimuth
            a.topocentric.altitude shouldBeExactly b.topocentric.altitude
        }
        "stenographic projection" {
            val coordinates = doubleArrayOf(5.0.arcsec, 8.0.arcsec)
            val projected = coordinates.stenographicProjection(0.0, 0.0, 100.0, 100.0, 1.0.arcsec, 0.0)
            projected[0] shouldBe (95.0 plusOrMinus 1e-8)
            projected[1] shouldBe (92.0 plusOrMinus 1e-8)
        }
        "destination coordinates" {
            val position1 = Position("05:35:18".hours, "-05 23 26".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 58, 42.4979)))
            val position2 = Position("04:54:45".hours, "-05 24 50".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 58, 58.1655)))
            val position3 = Position("04:14:08".hours, "-05 26 10".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 59, 13.3739)))
            val initialFrame = PlateSolution(true, 0.0, 1.0.arcsec, "04:14:08".hours, "-05 26 10".deg, 1280.0, 1024.0)
            val pe = PolarErrorDetermination(initialFrame, position1, position2, position3, LNG, SLAT)

            with(pe.destinationCoordinates(0.0, 0.0)) {
                this[0] shouldBe ("04:14:08".hours plusOrMinus 1e-14)
                this[1] shouldBe ("-05 26 10".deg plusOrMinus 1e-14)
            }
        }
        "perfectly aligned" {
            val position1 = Position("05:35:18".hours, "-05 23 26".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 58, 42.4979)))
            val position2 = Position("04:54:45".hours, "-05 24 50".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 58, 58.1655)))
            val position3 = Position("04:14:08".hours, "-05 26 10".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 10, 22, 59, 13.3739)))
            val initialFrame = PlateSolution(true, 0.0, 1.0.arcsec, "04:14:08".hours, "-05 26 10".deg, 1280.0, 1024.0)
            val pe = PolarErrorDetermination(initialFrame, position1, position2, position3, LNG, SLAT)
            val (az, alt) = pe.compute()

            // Calculated Error: Az: -00° 00' 04", Alt: -00° 00' 07", Tot: 00° 00' 08"
            az.toArcsec shouldBe (-4.0 plusOrMinus 2.5)
            alt.toArcsec shouldBe (-7.0 plusOrMinus 2.5)
        }
        "bad southern polar aligned" {
            val position1 = Position("05:35:29".hours, "-05 23 44".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 2, 28.0693)))
            val position2 = Position("04:54:48".hours, "-05 23 16".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 2, 43.0120)))
            val position3 = Position("04:14:05".hours, "-05 22 47".deg, LNG, SLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 2, 57.8800)))
            val initialFrame = PlateSolution(true, 0.0, 1.0.arcsec, "04:14:05".hours, "-05 22 47".deg, 1280.0, 1024.0)
            val pe = PolarErrorDetermination(initialFrame, position1, position2, position3, LNG, SLAT)
            val (az, alt) = pe.compute()

            // Calculated Error: Az: 00° 10' 10", Alt: 00° 04' 41", Tot: 00° 11' 11"
            az.toArcsec shouldBe (610.0 plusOrMinus 7.0)
            alt.toArcsec shouldBe (281.0 plusOrMinus 7.0)
        }
        "bad northern polar aligned" {
            val position1 = Position("05:35:35".hours, "-05 32 31".deg, LNG, NLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 19, 31.1390)))
            val position2 = Position("04:54:49".hours, "-05 34 43".deg, LNG, NLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 19, 46.2383)))
            val position3 = Position("04:13:55".hours, "-05 36 32".deg, LNG, NLAT, UTC(TimeYMDHMS(2024, 2, 11, 1, 20, 1.6394)))
            val initialFrame = PlateSolution(true, 0.0, 1.0.arcsec, "04:13:55".hours, "-05 36 32".deg, 1280.0, 1024.0)
            val pe = PolarErrorDetermination(initialFrame, position1, position2, position3, LNG, NLAT)
            val (az, alt) = pe.compute()

            // Calculated Error: Az: -00° 09' 58", Alt: 00° 04' 51", Tot: 00° 11' 05"
            az.toArcsec shouldBe (-598.0 plusOrMinus 7.0)
            alt.toArcsec shouldBe (291.0 plusOrMinus 7.0)
        }
    }

    companion object {

        @JvmStatic private val SLAT = "-023".deg
        @JvmStatic private val NLAT = "+023".deg
        @JvmStatic private val LNG = "-045".deg
    }
}
