package nebulosa.desktop.model

import nebulosa.nova.astrometry.Constellation
import nebulosa.skycatalog.SkyObjectType
import org.jetbrains.exposed.sql.Table

object DsoEntity : Table("dsos"), SkyObjectEntity {
    override val id = integer("id")
    val m = integer("m")
    val ngc = integer("ngc")
    val ic = integer("ic")
    val c = integer("c")
    val b = integer("b")
    val sh2 = integer("sh2")
    val vdb = integer("vdb")
    val rcw = integer("rcw")
    val ldn = integer("ldn")
    val lbn = integer("lbn")
    val cr = integer("cr")
    val mel = integer("mel")
    val pgc = integer("pgc")
    val ugc = integer("ugc")
    val arp = integer("arp")
    val vv = integer("vv")
    val dwb = integer("dwb")
    val tr = integer("tr")
    val st = integer("st")
    val ru = integer("ru")
    val vdbha = integer("vdbha")
    val ced = text("ced").nullable()
    val pk = text("pk").nullable()
    val png = text("png").nullable()
    val snrg = text("snrg").nullable()
    val aco = text("aco").nullable()
    val hcg = text("hcg").nullable()
    val eso = text("eso").nullable()
    val vdbh = text("vdbh").nullable()
    override val mB = double("mB")
    override val mV = double("mV")
    override val rightAscension = double("rightAscension")
    override val declination = double("declination")
    override val type = enumeration<SkyObjectType>("type")
    val mType = text("mType").nullable()
    val majorAxis = double("majorAxis")
    val minorAxis = double("minorAxis")
    val orientation = double("orientation")
    override val redshift = double("redshift")
    override val parallax = double("parallax")
    override val radialVelocity = double("radialVelocity")
    override val distance = double("distance")
    override val pmRA = double("pmRA")
    override val pmDEC = double("pmDEC")
    override val constellation = enumeration<Constellation>("constellation")

    override val primaryKey = PrimaryKey(id, name = "pk_dsos_id")
}
